import io
from contextlib import redirect_stdout


def execute_code(code_string, imports) -> str:
    """Execute the code generated by the API.
    Args:
        code_string (str): The code to execute.
        imports (dict): The imports to use.
    Returns:
        str: The output of the code.
    """
    global_env = {"__builtins__": __builtins__}
    global_env.update(imports)

    with redirect_stdout(io.StringIO()) as output:
        try:
            local_vars = {}
            exec(code_string, global_env, local_vars)
        except Exception as e:
            # Capture more context about the error
            error_msg = (
                f"Error executing code: '{code_string}'. Error: {str(e)}"
            )
            raise ValueError(error_msg) from e

    captured_output = output.getvalue()
    lines = code_string.strip().split("\n")
    last_line = lines[-1].strip()

    try:
        if "go" in imports.keys():
            return local_vars.get("fig", None)
        else:
            return eval(last_line, global_env)
    except Exception as e:
        # Return any captured output or if there's none, return the error message.
        return captured_output or str(e)
